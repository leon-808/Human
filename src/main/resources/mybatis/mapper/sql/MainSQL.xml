<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.example.demo.main.MainDAO">
	<select id="check_duplicateLocation" resultType="project.example.demo.dto.RestaurantDTO">
		select r_name, category, address
		from restaurant
		where address = #{param1}
	</select>
	
	<select id="get_member_name" resultType="string">
		select name
		from member
		where id = #{param1}
	</select>
	
	<select id="check_duplicateRequest" resultType="_int">
		select count(*)
		from admin_restaurant
		where adrt_r_name = #{param1}
		and adrt_address = #{param2}
	</select>
		
	<insert id="restaurant_approval_request">
		insert into admin_restaurant
		values(#{param1},#{param2},#{param3, jdbcType=VARCHAR},#{param4},
		#{param5, jdbcType=VARCHAR},#{param6},#{param7},#{param8, jdbcType=VARCHAR})
	</insert>
	
	<update id="restaurant_update_request">
		update admin_restaurant
		set adrt_lat = #{param1},
		adrt_lng = #{param2},
		adrt_primecode = #{param3},
		adrt_r_name = #{param4},
		adrt_owner = #{param5},
		adrt_category = #{param6},
		adrt_localurl = #{param8}
		where adrt_address = #{param7}
	</update>
	
	<select id="admin_search" resultType="string">
		select adrt_address
		from admin_restaurant
		where adrt_primecode = #{param1}
	</select>
	
	<select id="get_searchFilterLIst" resultType="project.example.demo.dto.RestaurantDTO">
		${param1}
	</select>
	
	<select id="countMyReviewList" resultType="_int">
		select count(*)
		from review
		where rv_id = #{param1}
	</select>
	
	<select id="getMyReviewList" resultType="project.example.demo.dto.ReviewDTO">
		select *
		from(
			select a.*, rownum r
			from(
				select rv_photo,rv_r_name,rv_time,rv_detail,rv_address
				from review
				where rv_id = #{param1}
				order by rv_time desc
			) a
			where rownum <![CDATA[<=]]> #{param3}
		)
		where r <![CDATA[>=]]> #{param2}
	</select>
	
	<select id="countMyStoreList" resultType="_int">
		select count(*)
		from restaurant
		where owner = #{param1}
	</select>
	
	<select id="getMyStoreList" resultType="project.example.demo.dto.RestaurantDTO">
		select *
		from(
			select a.*, rownum r
			from(
				select r_name, category, address
				from restaurant
				where owner = #{param1}
			) a
			where rownum <![CDATA[<=]]> #{param3}
		) 
		where r <![CDATA[>=]]> #{param2}
	</select>
	
	<select id="get_top3_tags" resultType="project.example.demo.dto.U_StatisticDTO">
		select *
		from (
		    select rownum r, a.*
		    from (
		        select *
		        from (
		            select u_clean, u_kind, u_parking, u_fast, u_pack, u_alone, u_together,
		            u_focus, u_talk, u_photoplace, u_delicious, u_portion, u_cost, u_lot, u_satisfy
		            from u_statistic
		            where u_id = #{param1}
		        ) 
		        unpivot (count for tags in (u_clean, u_kind, u_parking, u_fast, u_pack, u_alone,
		        u_together, u_focus, u_talk, u_photoplace, u_delicious, u_portion, 
		        u_cost, u_lot, u_satisfy))
		        order by count desc
		    ) a
		    where rownum <![CDATA[<=]]> 3
		)
	</select>
	
	<select id="prepare_train_keyQuest" resultType="project.example.demo.dto.StatisticDTO">
		select s_r_name, s_address, clean, kind, parking, fast, pack, alone, 
		together, focus, talk, photoplace, delicious, portion, cost, lot, satisfy
		from statistic a, review b
		where a.s_r_name = b.rv_r_name
		and a.s_address = b.rv_address
		and b.rv_id = #{param1}
		order by a.s_r_name
	</select>
	
	<select id="prepare_train_value" resultType="project.example.demo.dto.StatisticDTO">
		select s_r_name, s_address, tag_count
		from (
		    select a.*, dense_rank() over(partition by s_r_name order by tag_count desc) as rank
		    from (
		        select *
		        from (
		            select s_r_name, s_address, clean, kind, parking, fast, pack, alone, together, 
		            focus, talk, photoplace, delicious, portion, cost, lot, satisfy
		            from statistic a, review b
		            where a.s_r_name = b.rv_r_name
		            and a.s_address = b.rv_address
		            and b.rv_id = #{param1}
		        ) 
		        unpivot (tag_count for tags in (clean, kind, parking, fast, pack, alone, together,
		        focus, talk, photoplace, delicious, portion, cost, lot, satisfy))
		        order by s_r_name, tag_count desc
		    ) a
		)
		where (tags = #{param2} and rank <![CDATA[<=]]> 3 and tag_count <![CDATA[>=]]> 10)
	</select>
	
	<select id="prepare_challenge" resultType="project.example.demo.dto.StatisticDTO">
		select a.s_r_name, a.s_address, b.clean, b.kind, b.parking, b.fast, b.pack,
		b.alone, b.together, b.focus, b.talk, b.photoplace, b.delicious, b.portion,
		b.cost, b.lot, b.satisfy
		from (
		    select s_r_name, s_address
		    from statistic 
		    minus
		    select rv_r_name, rv_address
		    from review 
		    where rv_id = #{param1}
		) a, statistic b
		where a.s_r_name = b.s_r_name
		order by a.s_r_name
	</select>
	
	<select id="ai_display" resultType="project.example.demo.dto.RestaurantDTO">
		select lat, lng, r_name, address, category, r_phone
		from (
		    select a.s_r_name, a.s_address
		    from (
		        select s_r_name, s_address
		        from statistic 
		        minus
		        select rv_r_name, rv_address
		        from review 
		        where rv_id = #{param1}
		    ) a, statistic b
		    where a.s_r_name = b.s_r_name
		    order by a.s_r_name
		) c, restaurant d
		where c.s_r_name = d.r_name
		and c.s_address = d.address
	</select>
</mapper>